// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: recommand.proto

package recommend

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RecommendService_GetRecommendInformation_FullMethodName = "/rpc.recommend.RecommendService/GetRecommendInformation"
	RecommendService_RegisterRecommendUser_FullMethodName   = "/rpc.recommend.RecommendService/RegisterRecommendUser"
)

// RecommendServiceClient is the client API for RecommendService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecommendServiceClient interface {
	GetRecommendInformation(ctx context.Context, in *RecommendRequest, opts ...grpc.CallOption) (*RecommendResponse, error)
	RegisterRecommendUser(ctx context.Context, in *RecommendRegisterRequest, opts ...grpc.CallOption) (*RecommendRegisterResponse, error)
}

type recommendServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRecommendServiceClient(cc grpc.ClientConnInterface) RecommendServiceClient {
	return &recommendServiceClient{cc}
}

func (c *recommendServiceClient) GetRecommendInformation(ctx context.Context, in *RecommendRequest, opts ...grpc.CallOption) (*RecommendResponse, error) {
	out := new(RecommendResponse)
	err := c.cc.Invoke(ctx, RecommendService_GetRecommendInformation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recommendServiceClient) RegisterRecommendUser(ctx context.Context, in *RecommendRegisterRequest, opts ...grpc.CallOption) (*RecommendRegisterResponse, error) {
	out := new(RecommendRegisterResponse)
	err := c.cc.Invoke(ctx, RecommendService_RegisterRecommendUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecommendServiceServer is the server API for RecommendService service.
// All implementations must embed UnimplementedRecommendServiceServer
// for forward compatibility
type RecommendServiceServer interface {
	GetRecommendInformation(context.Context, *RecommendRequest) (*RecommendResponse, error)
	RegisterRecommendUser(context.Context, *RecommendRegisterRequest) (*RecommendRegisterResponse, error)
	mustEmbedUnimplementedRecommendServiceServer()
}

// UnimplementedRecommendServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRecommendServiceServer struct {
}

func (UnimplementedRecommendServiceServer) GetRecommendInformation(context.Context, *RecommendRequest) (*RecommendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecommendInformation not implemented")
}
func (UnimplementedRecommendServiceServer) RegisterRecommendUser(context.Context, *RecommendRegisterRequest) (*RecommendRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterRecommendUser not implemented")
}
func (UnimplementedRecommendServiceServer) mustEmbedUnimplementedRecommendServiceServer() {}

// UnsafeRecommendServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecommendServiceServer will
// result in compilation errors.
type UnsafeRecommendServiceServer interface {
	mustEmbedUnimplementedRecommendServiceServer()
}

func RegisterRecommendServiceServer(s grpc.ServiceRegistrar, srv RecommendServiceServer) {
	s.RegisterService(&RecommendService_ServiceDesc, srv)
}

func _RecommendService_GetRecommendInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecommendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecommendServiceServer).GetRecommendInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecommendService_GetRecommendInformation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecommendServiceServer).GetRecommendInformation(ctx, req.(*RecommendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecommendService_RegisterRecommendUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecommendRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecommendServiceServer).RegisterRecommendUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecommendService_RegisterRecommendUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecommendServiceServer).RegisterRecommendUser(ctx, req.(*RecommendRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RecommendService_ServiceDesc is the grpc.ServiceDesc for RecommendService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RecommendService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.recommend.RecommendService",
	HandlerType: (*RecommendServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRecommendInformation",
			Handler:    _RecommendService_GetRecommendInformation_Handler,
		},
		{
			MethodName: "RegisterRecommendUser",
			Handler:    _RecommendService_RegisterRecommendUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "recommand.proto",
}
